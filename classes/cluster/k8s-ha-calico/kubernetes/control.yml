classes:
- service.etcd.server.cluster
- system.haproxy.proxy.listen.kubernetes.apiserver
- system.linux.system.repo.docker_legacy
- system.salt.minion.cert.etcd_server
- system.kubernetes.master.cluster
- cluster.k8s-ha-calico.kubernetes.compute
- cluster.k8s-ha-calico
# FIXME: replace service.helm to system.helm (once properly in reclass)
- service.helm.client
parameters:
  _param:
    keepalived_vip_interface: ${_param:primary_interface}
    keepalived_vip_virtual_router_id: 60
  helm:
    client:
      repos:
        mirantisworkloads: https://mirantisworkloads.storage.googleapis.com/
      #releases:
      # TODO: configure custom application stacks below
      #  grafana:
      #    chart: mirantisworkloads/grafana
      #    version: 0.4.1
      #    values:
      #      replicas: 1
      #      logLevel: INFO
  etcd:
    server:
      bind:
        host: ${_param:deploy_address}
      source:
        engine: docker_hybrid
      ssl:
        enabled: true
      setup:
        calico:
          key: /calico/v1/ipam/v4/pool/${_param:calico_private_network}-${_param:calico_private_netmask}
          value: '{"masquerade":true,"cidr":"${_param:calico_private_network}/${_param:calico_private_netmask}"}'
  kubernetes:
    common:
      addons:
        dashboard:
          enabled: ${_param:kubernetes_dashboard}
          image: ${_param:kubernetes_dashboard_image}
        helm:
          enabled: ${_param:kubernetes_helm_enabled}
        calico_policy:
          enabled: ${_param:kubernetes_calico_policy_enabled}
          image: ${_param:kubernetes_calico_policy_image}
        netchecker:
          enabled: ${_param:kubernetes_netchecker_enabled}
          agent_image: ${_param:kubernetes_netchecker_agent_image}
          server_image: ${_param:kubernetes_netchecker_server_image}
          agent_probeurls: ${_param:kubernetes_netchecker_agent_probeurls}
        dns:
          enabled: ${_param:kubernetes_dns}
          kubedns_image: ${_param:kubernetes_kubedns_image}
          dnsmasq_image: ${_param:kubernetes_dnsmasq_image}
          sidecar_image: ${_param:kubernetes_sidecar_image}
          autoscaler:
            image: ${_param:kubernetes_dns_autoscaler_image}
        coredns:
          enabled: ${_param:kubernetes_coredns_enabled}
        externaldns:
          enabled: ${_param:kubernetes_externaldns_enabled}
          image: ${_param:kubernetes_externaldns_image}
          provider: ${_param:kubernetes_externaldns_provider}
    master:
      kubelet:
        address: ${_param:single_address}
        fail_on_swap: ${_param:kubelet_fail_on_swap}
      etcd:
        ssl:
          enabled: true
      network:
        etcd:
          ssl:
            enabled: true
      namespace:
        netchecker:
          enabled: true
